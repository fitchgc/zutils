{"version":3,"sources":["../../src/common/AsyncQueue.ts"],"sourcesContent":["type Callback<T> = () => Promise<T>\n\nexport type AsyncQueue<T = void> = {\n  push: (task: Callback<T>) => Promise<T>\n  flush: () => Promise<void>\n  size: number\n}\n\n/**\n * Ensures that each callback pushed onto the queue is executed in series.\n * Such a quetie ðŸ˜»\n * @param opts.dedupeConcurrent If dedupeConcurrent is `true` it ensures that if multiple\n * tasks are pushed onto the queue while there is an active task, only the\n * last one will be executed, once the active task has completed.\n * e.g. in the below example, only 0 and 3 will be executed.\n * ```\n * const queue = createAsyncQueue({ dedupeConcurrent: true })\n * queue.push(async () => console.log(0)) // returns 0\n * queue.push(async () => console.log(1)) // returns 3\n * queue.push(async () => console.log(2)) // returns 3\n * queue.push(async () => console.log(3)) // returns 3\n * ```\n * */\nexport function createAsyncQueue<T = void>(opts = { dedupeConcurrent: false }): AsyncQueue<T> {\n  const { dedupeConcurrent } = opts\n  let queue: Callback<T>[] = []\n  let running: Promise<void> | undefined\n  let nextPromise = new DeferredPromise<T>()\n  const push = (task: Callback<T>) => {\n    let taskPromise = new DeferredPromise<T>()\n    if (dedupeConcurrent) {\n      queue = []\n      if (nextPromise.started) nextPromise = new DeferredPromise<T>()\n      taskPromise = nextPromise\n    }\n    queue.push(() => {\n      taskPromise.started = true\n      task().then(taskPromise.resolve).catch(taskPromise.reject)\n      return taskPromise.promise\n    })\n    if (!running) running = start()\n    return taskPromise.promise\n  }\n  const start = async () => {\n    while (queue.length) {\n      const task = queue.shift()!\n      await task().catch(() => {})\n    }\n    running = undefined\n  }\n  return {\n    push,\n    flush: () => running || Promise.resolve(),\n    get size() {\n      return queue.length\n    },\n  }\n}\n\nexport const createAsyncQueues = <T = void>(opts = { dedupeConcurrent: false }) => {\n  const queues: { [queueId: string]: AsyncQueue<T> } = {}\n  const push = (queueId: string, task: Callback<T>) => {\n    if (!queues[queueId]) queues[queueId] = createAsyncQueue<T>(opts)\n    return queues[queueId].push(task)\n  }\n  const flush = (queueId: string) => {\n    if (!queues[queueId]) queues[queueId] = createAsyncQueue<T>(opts)\n    return queues[queueId].flush()\n  }\n  return { push, flush }\n}\n\nclass DeferredPromise<T = void, E = any> {\n  started = false\n  resolve: (x: T | PromiseLike<T>) => void = () => {}\n  reject: (x: E) => void = () => {}\n  promise: Promise<T>\n\n  constructor() {\n    this.promise = new Promise<T>((res, rej) => {\n      this.resolve = res\n      this.reject = rej\n    })\n  }\n}\n"],"mappings":";AAuBO,SAAS,iBAA2B,OAAO,EAAE,kBAAkB,MAAM,GAAkB;AAC5F,QAAM,EAAE,iBAAiB,IAAI;AAC7B,MAAI,QAAuB,CAAC;AAC5B,MAAI;AACJ,MAAI,cAAc,IAAI,gBAAmB;AACzC,QAAM,OAAO,CAAC,SAAsB;AAClC,QAAI,cAAc,IAAI,gBAAmB;AACzC,QAAI,kBAAkB;AACpB,cAAQ,CAAC;AACT,UAAI,YAAY,QAAS,eAAc,IAAI,gBAAmB;AAC9D,oBAAc;AAAA,IAChB;AACA,UAAM,KAAK,MAAM;AACf,kBAAY,UAAU;AACtB,WAAK,EAAE,KAAK,YAAY,OAAO,EAAE,MAAM,YAAY,MAAM;AACzD,aAAO,YAAY;AAAA,IACrB,CAAC;AACD,QAAI,CAAC,QAAS,WAAU,MAAM;AAC9B,WAAO,YAAY;AAAA,EACrB;AACA,QAAM,QAAQ,YAAY;AACxB,WAAO,MAAM,QAAQ;AACnB,YAAM,OAAO,MAAM,MAAM;AACzB,YAAM,KAAK,EAAE,MAAM,MAAM;AAAA,MAAC,CAAC;AAAA,IAC7B;AACA,cAAU;AAAA,EACZ;AACA,SAAO;AAAA,IACL;AAAA,IACA,OAAO,MAAM,WAAW,QAAQ,QAAQ;AAAA,IACxC,IAAI,OAAO;AACT,aAAO,MAAM;AAAA,IACf;AAAA,EACF;AACF;AAEO,IAAM,oBAAoB,CAAW,OAAO,EAAE,kBAAkB,MAAM,MAAM;AACjF,QAAM,SAA+C,CAAC;AACtD,QAAM,OAAO,CAAC,SAAiB,SAAsB;AACnD,QAAI,CAAC,OAAO,OAAO,EAAG,QAAO,OAAO,IAAI,iBAAoB,IAAI;AAChE,WAAO,OAAO,OAAO,EAAE,KAAK,IAAI;AAAA,EAClC;AACA,QAAM,QAAQ,CAAC,YAAoB;AACjC,QAAI,CAAC,OAAO,OAAO,EAAG,QAAO,OAAO,IAAI,iBAAoB,IAAI;AAChE,WAAO,OAAO,OAAO,EAAE,MAAM;AAAA,EAC/B;AACA,SAAO,EAAE,MAAM,MAAM;AACvB;AAEA,IAAM,kBAAN,MAAyC;AAAA,EAMvC,cAAc;AALd,mBAAU;AACV,mBAA2C,MAAM;AAAA,IAAC;AAClD,kBAAyB,MAAM;AAAA,IAAC;AAI9B,SAAK,UAAU,IAAI,QAAW,CAAC,KAAK,QAAQ;AAC1C,WAAK,UAAU;AACf,WAAK,SAAS;AAAA,IAChB,CAAC;AAAA,EACH;AACF;","names":[]}