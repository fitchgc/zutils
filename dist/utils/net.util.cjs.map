{"version":3,"sources":["../../src/utils/net.util.ts","../../src/common/ZError.ts"],"sourcesContent":["import { ZError } from 'common/ZError'\n\nexport function generateHeader() {\n  let random = function (start, end) {\n    return (Math.random() * (end - start) + start) | 0\n  }\n  let getIp = function () {\n    return `${random(1, 254)}.${random(1, 254)}.${random(1, 254)}.${random(1, 254)}`\n  }\n  let time = Date.now()\n  let useragent = `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${\n    (70 + Math.random() * 10) | 0\n  }.0.4324.${(Math.random() * 100) | 0} Safari/537.36`\n  const ip = getIp()\n  return {\n    'Refresh-Token': (time -= 5000),\n    'Cache-Control': 'no-cache',\n    'User-Agent': useragent,\n    'X-Forwarded-For': ip,\n    'X-Real-IP': ip,\n    'Content-Type': 'application/json',\n  }\n}\n\nexport const checkParamsNeeded = (...args) => {\n  args.forEach(arg => {\n    if (!arg) {\n      throw new ZError(10, 'parameters mismatch')\n    }\n  })\n}\n\n/**\n * Generate a string in the format key1=val1&key2=val2\n * @param {object} data The object to be processed\n * @param {boolean} sort Whether to sort by key in ascending order\n * @param {boolean} ignoreNull Whether to filter out null values (spaces or null values are not included in the concatenation)\n * @param splitChar The connecting character, defaults to &\n * @param equalChar The equals character, defaults to =\n */\nexport function generateKVStr({\n  data = {},\n  sort = false,\n  encode = false,\n  ignoreNull = true,\n  splitChar = '&',\n  equalChar = '=',\n  uri = '',\n}: {\n  data?: any\n  sort?: boolean\n  encode?: boolean\n  ignoreNull?: boolean\n  splitChar?: string\n  equalChar?: string\n  uri?: string\n}) {\n  const keys = Object.keys(data)\n  sort && keys.sort()\n  let result = ''\n  let i = 0\n  for (let key of keys) {\n    if (ignoreNull && !data[key]) {\n      continue\n    }\n    if (i++ > 0) result += splitChar\n    if (encode) {\n      result += `${key}${equalChar}${encodeURIComponent(data[key])}`\n    } else {\n      result += `${key}${equalChar}${data[key]}`\n    }\n  }\n  if (uri) {\n    const joinChar = uri.search(/\\?/) === -1 ? '?' : '&'\n    result = uri + joinChar + result\n  }\n  return result\n}\n\n/**\n * Assemble a string in the format key1=val&key2=val into an object\n * @param str A string in the format key1=val&key2=val\n * @param splitChar The connecting character, defaults to &\n * @param equalChar The equals character, defaults to =\n */\nexport function keyValToObject(str: string, splitChar: string = '&', equalChar = '='): {} {\n  let result: any = {}\n  if (!str) {\n    return result\n  }\n  let arrs = str.split(splitChar)\n  for (let sub of arrs) {\n    let subArr = sub.split(equalChar)\n    result[subArr[0]] = subArr[1]\n  }\n  return result\n}\n\nexport const RE_URL_SCHEME = /^(.+?):\\/\\/.+?$/\n/**\n * Get the scheme from the URL\n * @param url\n * @returns\n */\nexport function findUrlScheme(url: string) {\n  let result = url.match(RE_URL_SCHEME)\n  if (!result) {\n    return ''\n  }\n  return result[1]\n}\n\n/**\n * Parse user information in JWT token, without signature verification\n * @param token\n * @returns\n */\nexport function decodeJWT(token: string) {\n  let strings = token.split('.')\n  var userinfo = JSON.parse(\n    decodeURIComponent(encodeURIComponent(window.atob(strings[1].replace(/-/g, '+').replace(/_/g, '/')))),\n  )\n  return userinfo\n}\n","export class ZError implements Error {\n  code: string\n  statusCode?: number\n  message: string\n  name: string\n\n  constructor(statusCode: number, message: string) {\n    this.statusCode = statusCode\n    this.message = message\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,IAAM,SAAN,MAA8B;AAAA,EAMnC,YAAY,YAAoB,SAAiB;AAC/C,SAAK,aAAa;AAClB,SAAK,UAAU;AAAA,EACjB;AACF;;;ADRO,SAAS,iBAAiB;AAC/B,MAAI,SAAS,SAAU,OAAO,KAAK;AACjC,WAAQ,KAAK,OAAO,KAAK,MAAM,SAAS,QAAS;AAAA,EACnD;AACA,MAAI,QAAQ,WAAY;AACtB,WAAO,GAAG,OAAO,GAAG,GAAG,CAAC,IAAI,OAAO,GAAG,GAAG,CAAC,IAAI,OAAO,GAAG,GAAG,CAAC,IAAI,OAAO,GAAG,GAAG,CAAC;AAAA,EAChF;AACA,MAAI,OAAO,KAAK,IAAI;AACpB,MAAI,YAAY,gGACb,KAAK,KAAK,OAAO,IAAI,KAAM,CAC9B,WAAY,KAAK,OAAO,IAAI,MAAO,CAAC;AACpC,QAAM,KAAK,MAAM;AACjB,SAAO;AAAA,IACL,iBAAkB,QAAQ;AAAA,IAC1B,iBAAiB;AAAA,IACjB,cAAc;AAAA,IACd,mBAAmB;AAAA,IACnB,aAAa;AAAA,IACb,gBAAgB;AAAA,EAClB;AACF;AAEO,IAAM,oBAAoB,IAAI,SAAS;AAC5C,OAAK,QAAQ,SAAO;AAClB,QAAI,CAAC,KAAK;AACR,YAAM,IAAI,OAAO,IAAI,qBAAqB;AAAA,IAC5C;AAAA,EACF,CAAC;AACH;AAUO,SAAS,cAAc;AAAA,EAC5B,OAAO,CAAC;AAAA,EACR,OAAO;AAAA,EACP,SAAS;AAAA,EACT,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,MAAM;AACR,GAQG;AACD,QAAM,OAAO,OAAO,KAAK,IAAI;AAC7B,UAAQ,KAAK,KAAK;AAClB,MAAI,SAAS;AACb,MAAI,IAAI;AACR,WAAS,OAAO,MAAM;AACpB,QAAI,cAAc,CAAC,KAAK,GAAG,GAAG;AAC5B;AAAA,IACF;AACA,QAAI,MAAM,EAAG,WAAU;AACvB,QAAI,QAAQ;AACV,gBAAU,GAAG,GAAG,GAAG,SAAS,GAAG,mBAAmB,KAAK,GAAG,CAAC,CAAC;AAAA,IAC9D,OAAO;AACL,gBAAU,GAAG,GAAG,GAAG,SAAS,GAAG,KAAK,GAAG,CAAC;AAAA,IAC1C;AAAA,EACF;AACA,MAAI,KAAK;AACP,UAAM,WAAW,IAAI,OAAO,IAAI,MAAM,KAAK,MAAM;AACjD,aAAS,MAAM,WAAW;AAAA,EAC5B;AACA,SAAO;AACT;AAQO,SAAS,eAAe,KAAa,YAAoB,KAAK,YAAY,KAAS;AACxF,MAAI,SAAc,CAAC;AACnB,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AACA,MAAI,OAAO,IAAI,MAAM,SAAS;AAC9B,WAAS,OAAO,MAAM;AACpB,QAAI,SAAS,IAAI,MAAM,SAAS;AAChC,WAAO,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC;AAAA,EAC9B;AACA,SAAO;AACT;AAEO,IAAM,gBAAgB;AAMtB,SAAS,cAAc,KAAa;AACzC,MAAI,SAAS,IAAI,MAAM,aAAa;AACpC,MAAI,CAAC,QAAQ;AACX,WAAO;AAAA,EACT;AACA,SAAO,OAAO,CAAC;AACjB;AAOO,SAAS,UAAU,OAAe;AACvC,MAAI,UAAU,MAAM,MAAM,GAAG;AAC7B,MAAI,WAAW,KAAK;AAAA,IAClB,mBAAmB,mBAAmB,OAAO,KAAK,QAAQ,CAAC,EAAE,QAAQ,MAAM,GAAG,EAAE,QAAQ,MAAM,GAAG,CAAC,CAAC,CAAC;AAAA,EACtG;AACA,SAAO;AACT;","names":[]}