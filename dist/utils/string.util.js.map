{"version":3,"sources":["../../src/utils/string.util.ts"],"sourcesContent":["/**\n * 判断传入的值是否为true\n * @param {Object} obj   传入值为'true','TRUE',1,'1','on','ON','YES','yes'时,返回true,其他值均返回false\n * @return {boolean}\n */\nexport function isTrue(obj: any): boolean {\n  return (\n    obj === 'true' ||\n    obj === 'TRUE' ||\n    obj === 'True' ||\n    obj === 'on' ||\n    obj === 'ON' ||\n    obj === true ||\n    obj === 1 ||\n    obj === '1' ||\n    obj === 'YES' ||\n    obj === 'yes'\n  )\n}\n\n/**\n * 验证ObjectId格式是否正确\n * @param {string} id\n * @return {boolean}\n */\nexport function isObjectId(id: string): boolean {\n  //mongoose.Types.ObjectId.isValid(id)\n  return /^[a-fA-F0-9]{24}$/.test(id)\n}\n\nconst base62Alphabet = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n/**\n * 10进制 -> 62进制\n * @param {string | number} number\n * @return {string}\n */\nexport function string10to62(number: string | number): string {\n  const chars = base62Alphabet.split('')\n  const radix = chars.length\n  let qutient = +number\n  const arr = []\n  do {\n    const mod = qutient % radix\n    qutient = (qutient - mod) / radix\n    arr.unshift(chars[mod])\n  } while (qutient)\n  return arr.join('')\n}\n\n/**\n * 62进制 -> 10 进制\n * @param {string} numberCode\n * @return {number}\n */\nexport function string62to10(numberCode: string): number {\n  const chars = base62Alphabet\n  const radix = chars.length\n  numberCode = numberCode + ''\n  const len = numberCode.length\n  let i = 0\n  let originNumber = 0\n  while (i < len) {\n    originNumber += Math.pow(radix, i++) * (chars.indexOf(numberCode.charAt(len - i)) || 0)\n  }\n  return originNumber\n}\n\nconst base58Alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nexport const hexToBase58 = (hexString: string) => {\n  const bytes = hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16))\n  let base58String = ''\n\n  let num = BigInt('0x' + hexString)\n  while (num > BigInt(0)) {\n    const remainder = num % BigInt(58)\n    num = num / BigInt(58)\n    base58String = base58Alphabet[Number(remainder)] + base58String\n  }\n\n  return base58String\n}\n\nexport const base58ToHex = (base58String: string) => {\n  const base58Length = base58String.length\n  let num = BigInt(0)\n  for (let i = 0; i < base58Length; i++) {\n    const charIndex = base58Alphabet.indexOf(base58String[i])\n    if (charIndex === -1) {\n      throw new Error('Invalid Base58 string')\n    }\n\n    num = num * BigInt(58) + BigInt(charIndex)\n  }\n  return num.toString(16)\n}\n\nexport const hexToBase32 = (hexString: string) => {\n  const bytes = hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16))\n  const base32Alphabet = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n  let base32String = ''\n\n  let num = BigInt('0x' + hexString)\n  while (num > BigInt(0)) {\n    const remainder = num % BigInt(32)\n    num = num / BigInt(32)\n    base32String = base32Alphabet[Number(remainder)] + base32String\n  }\n\n  return base32String\n}\n\nconst reNormalUUID = /^[0-9a-fA-F-]{36}$/\nconst reLongUUID = /^[0-9a-fA-F]{32}$/\nconst reShortUUID = /^[0-9a-zA-Z+/]{22,23}$/\nconst n = /-/g\n\nexport function compressUuid(e: string, t: boolean = false) {\n  if (reNormalUUID.test(e)) {\n    e = e.replace(n, '')\n  } else if (!reLongUUID.test(e)) {\n    return e\n  }\n  var r = !0 === t ? 2 : 5\n  return compressHex(e, r)\n}\n\nconst CHARS_BASE64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nexport function compressHex(e: string, r: number) {\n  var i,\n    n = e.length\n  i = void 0 !== r ? r : n % 3\n  for (var s = e.slice(0, i), o = []; i < n; ) {\n    var u = parseInt(e[i], 16),\n      a = parseInt(e[i + 1], 16),\n      c = parseInt(e[i + 2], 16)\n    o.push(CHARS_BASE64[(u << 2) | (a >> 2)])\n    o.push(CHARS_BASE64[((3 & a) << 4) | c])\n    i += 3\n  }\n  return s + o.join('')\n}\n\nexport function isUUID(uuid: string) {\n  return reNormalUUID.test(uuid)\n}\n\nexport function hexToUtf8(hexString: string) {\n  // Remove any leading \"0x\" prefix and split into pairs of characters\n  let _hexString = hexString.replace(/^0x/, '')\n  let buffer = Buffer.from(_hexString, 'hex')\n  return buffer.toString('utf8')\n}\n\nexport function utf8ToHex(utf8String: string) {\n  // Create a Buffer object from the UTF-8 string\n  const buffer = Buffer.from(utf8String, 'utf8')\n\n  // Convert the Buffer object to a hex string\n  const hexString = buffer.toString('hex')\n\n  return hexString\n}\n\n/**\n * 判断是否是json格式的字符串\n * @param {string} str\n * @return {boolean}\n */\nexport function isJsonString(str: string): boolean {\n  try {\n    if (typeof JSON.parse(str) == 'object') {\n      return true\n    }\n  } catch (e) {}\n  return false\n}\n/**\n * 检查accountId是否符合规则\n * 4位渠道id_4位游戏id_openid\n * @param accountId\n * @returns\n */\nexport function checkAccountId(accountId: string) {\n  return /^\\d{4}_\\d{4,6}_.+$/.test(accountId)\n}\n/**\n * 将accountId拆分出 渠道id, 游戏id, 和openId\n * @param accountId\n * @returns\n */\nexport function parseGameAccountId(accountId: string) {\n  const arr = accountId.split('_')\n  const gameId = arr[1]\n  const channel = arr[0]\n  const openId = arr[2]\n  return { gameId, channel, openId }\n}\n\nexport function checkAddress(address: string) {\n  return /^0x[0-9a-fA-F]{40}$/.test(address)\n}\n"],"mappings":"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","names":["n"]}